@page "/shifts"
@using Agendo.Client.HttpClients
@using Agendo.Shared;
@using Agendo.Shared.Form.CreateShift;
@using Radzen;
@using Radzen.Blazor;
@using Agendo.Server.Models;
@using System.Text.Json;
@using System.Text;

@inject IApiClient ApiClient;
@inject DialogService DialogService
<PageTitle>Shifts</PageTitle>


<RadzenButton Click="OpenAddShift" Icon="add_circle_outline"></RadzenButton>
<RadzenButton Click="DeleteShift" Icon="delete"></RadzenButton>
<RadzenButton Click="EditShift" Icon="edit"></RadzenButton>





@if (shifts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-container grid grid-cols-1 gap-4 min-w-[1070px] md:max-w-[860px] md:grid-cols-3 md:gap-8 mt-8">
        @foreach (var shift in shifts)
        {

            <div class="w-full bg-white h-100px rounded-lg overflow-hidden shadow-xl">
                <div class="card-wrapper p-4">
                    <p class="text-2xl font-bold block whitespace-nowrap">@shift.Name</p>
                    <p class="block">Duration: @shift.Hours h</p>
                </div>
                <div class="card-color h-4 w-full" style="background-color: @shift.Color;"></div>

            </div>
        }
    </div>
}

@code {

    private IEnumerable<DailyScheduleDTO>? shifts;

    protected override async Task OnInitializedAsync()
    {
        shifts = await ApiClient.GetDailySchedule();

    }
    async Task OpenAddShift()
    {
        DailyScheduleDTO data = await DialogService.OpenAsync<AddNewShiftPage>("Add Shift");
        await OnInitializedAsync();
    }

    async Task DeleteShift()
    {
        DailyScheduleDTO data = await DialogService.OpenAsync<AddNewShiftPage>("Add Shift");
        await OnInitializedAsync();
    }


    async Task EditShift()
    {
        DailyScheduleDTO data = await DialogService.OpenAsync<AddNewShiftPage>("Add Shift");
        await OnInitializedAsync();
    }

}
