@using System.Collections;
@using Agendo.Client.HttpClients;
@using Agendo.Server.Models;
@using Agendo.Shared;
@using Radzen.Blazor;
@using Radzen;
@using System.Security.Claims;

@attribute [Authorize(Roles = "719")]

@inject DialogService DialogService
@inject HttpClient Http
@inject IScheduleManagementClient ApiShiftManagment;
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Schdule Role 719</PageTitle>


<div class="w-full mb-3">
    <label for="input" class="block text-gray-700 text-sm font-bold mb-2">Employee:</label>
    <div class="flex justify-between items-center">
        <div>
            <RadzenDropDown TItem="DomainDTO" @bind-Value=@EmpNrs Data=@employees TextProperty="Name" ValueProperty="Nr"
                Multiple=true Placeholder="Select Employees" AllowClear="true" Chips="true"
                Style="width: 100%; max-width: 400px;" />


        </div>

        <div>
            <RadzenDatePicker Change=@ChangeStartTime @bind-Value=@valstart1 ShowTime="true" TimeOnly="true"
                DateFormat="HH:mm" />
        </div>
    </div>
</div>



<RadzenScheduler @ref=@scheduler TItem="EmployeeShiftDTO" Data=@employeeShiftDTOs SlotRender=@OnSlotRender
    SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender
    TextProperty="ShiftAndDomainName" SelectedIndex="1" StartProperty="Start" EndProperty="End"
    Style="width: auto; height: 700px;">


    <RadzenWeekView TimeFormat="HH:mm" EndTime="Endtime" StartTime="Starttime" />
    <RadzenMonthView />
</RadzenScheduler>


<EventConsole @ref=@console />



@code {
    public DateTime? valstart1 = new DateTime(2023, 1, 1, 0, 0, 0);
    public DateTime? valstart2 = new DateTime(2023, 1, 1, 23, 59, 59);
    public RadzenScheduler<EmployeeShiftDTO> scheduler { get; set; } = new RadzenScheduler<EmployeeShiftDTO>();
    public RadzenHeader header = new RadzenHeader();
    public TimeSpan Endtime = new TimeSpan(23, 59, 59);
    public TimeSpan Starttime = new TimeSpan(0, 0, 0);
    public Action<SchedulerAppointmentRenderEventArgs<EmployeeShiftDTO>> AppointmentRender { get; set; }
    private IEnumerable<DailyScheduleDTO>? DailyShifts;
    private IEnumerable<EmployeeShiftDTO>? employeeShiftManagement;

    private int _empNr = 0;
    public int EmpNr
    {
        get { return _empNr; }
        set
        {
            _empNr = value;
            FetchEmpShifts();
        }
    }


    private List<int> _empNrs = new List<int>();
    public List<int> EmpNrs
    {
        get { return _empNrs; }
        set
        {
            _empNrs = value;
            FetchEmpShifts();
        }
    }

    private IEnumerable<DomainDTO>? employees;

    protected override async Task OnInitializedAsync()
    {
        employees = (List<DomainDTO>)await Http.GetFromJsonAsync<IEnumerable<DomainDTO>>("api/domain");
        DailyShifts = await Http.GetFromJsonAsync<IEnumerable<DailyScheduleDTO>>("api/dailySchedule");
    }


    public Dictionary<string, object> dict { get; set; } = new Dictionary<string, object>();
    EventConsole console;

    List<EmployeeShiftDTO> employeeShiftDTOs = new List<EmployeeShiftDTO>();


    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {


        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }


        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(155,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        console.Log($"SlotSelect: Start={args.Start} End={args.End}");

        // Initialize the dictionary with the common data for all selected employees
        var dict = new Dictionary<string, object>
        {
        { "Start", args.Start },
        { "End", args.End },
        // Add other common data if needed
        };

        foreach (var empNr in EmpNrs)
        {
            // Add employee-specific data to the dictionary
            dict["EmpNR"] = empNr;

            // Open the dialog and handle exceptions
            try
            {
                EmployeeShiftDTO data = await DialogService.OpenAsync<AddShiftPage>("Add Shift", new Dictionary<string, object>(dict));
                if (data != null)
                {
                    employeeShiftDTOs.Add(data);
                    console.Log(data);

                    // Fetch shifts for each employee
                    FetchEmpShiftsNr(empNr);
                }
            }
            catch (Exception ex)
            {
                // Handle the exception (e.g., log it or show an error message)
                console.Log($"Error: {ex.Message}");
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<EmployeeShiftDTO> args)
    {
        try
        {
            console.Log($"AppointmentSelect: Appointment={args.Data.ShiftName}");

            EmployeeShiftDTO copy = new EmployeeShiftDTO
                {
                    Start = args.Data.Start,
                    End = args.Data.End,
                    ShiftNR = args.Data.ShiftNR,
                    DomainDTO = args.Data.DomainDTO
                };

            var data = await DialogService.OpenAsync<EditShiftPage>("Edit Shift", new Dictionary<string, object> {
                { "Shift", copy },
                {"EmpNR", EmpNr}
            });

            FetchEmpShifts();
        }
        catch (Exception ex)
        {
            console.Log($"An error occurred: {ex.Message}");
        }
    }



    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<EmployeeShiftDTO> args)
    {
        var matchingShift = DailyShifts.FirstOrDefault(shift => shift.Name == args.Data.ShiftName);

        if (matchingShift != null)
        {
            args.Attributes["style"] = $"background: {matchingShift.Color}";
            args.Attributes["title"] = $"EmpNr: {args.Data.EmpNr}, ShiftName: {args.Data.ShiftName}";
        }
    }



    void ChangeStartTime()
    {
        Starttime = new TimeSpan(valstart1.Value.Hour, valstart1.Value.Minute, valstart1.Value.Second);
    }


    async void FetchEmpShifts()
    {
        try
        {
            if (EmpNrs != null && EmpNrs.Any())
            {
                var employeeShifts = new List<EmployeeShiftDTO>();

                foreach (var empNr in EmpNrs)
                {
                    var x = await Http.GetFromJsonAsync<IEnumerable<EmployeeShiftDTO>>("api/EmployeeShift?Emp=" + empNr);

                    if (x != null)
                    {
                        employeeShifts.AddRange(x);
                    }
                }

                employeeShiftDTOs = employeeShifts;
                StateHasChanged();
                await scheduler.Reload();
            }
            else
            {
                // Handle the case where no employees are selected
                // Clear the scheduler data and reload
                employeeShiftDTOs.Clear();
                StateHasChanged();
                await scheduler.Reload();
            }
        }
        catch (Exception ex)
        {
            // Log or handle the exception
            console.Log($"Error fetching employee shifts: {ex.Message}");
        }
    }

    async void FetchEmpShiftsNr(int nr)
    {
        try
        {
            var x = await Http.GetFromJsonAsync<IEnumerable<EmployeeShiftDTO>>("api/EmployeeShift?Emp=" + EmpNr);

            if (x != null)
            {
                employeeShiftDTOs = (List<EmployeeShiftDTO>)x;
                StateHasChanged();
                await scheduler.Reload();
            }
            else
            {
                // Log or handle the case where the data is null
                console.Log("Error: Received null data from the server.");
            }
        }
        catch (Exception ex)
        {
            // Log or handle the exception
            console.Log($"Error fetching employee shifts: {ex.Message}");
        }
    }


}
