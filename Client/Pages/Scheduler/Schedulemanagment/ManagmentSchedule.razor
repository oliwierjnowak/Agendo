@using System.Collections;
@using Agendo.Client.HttpClients;
@using Agendo.Shared;
@using Agendo.Shared.DTOs
@using Radzen.Blazor;
@using Radzen;
@using System.Security.Claims;
@using System.Globalization;
@attribute [Authorize(Roles = "719")]

@inject DialogService DialogService
@inject IApiClient ApiClient;
@inject AuthenticationStateProvider AuthStateProvider;



<PageTitle>Schdule Role 719</PageTitle>

   
<div class="w-full mb-3">
        <div class="flex flex-row w-full align-top items-top w-full justify-between w-full">
            <div>
                <label for="input" class="block text-gray-700 text-sm font-bold mb-2">Employee:</label>

                <RadzenDropDown TItem="DomainDTO" @bind-Value=@EmpNrs Data=@employees TextProperty="Name" ValueProperty="Nr"
                                Multiple=true Placeholder="Select Employees" AllowClear="true" Chips="true" Change="@DropdownChanged"
                                Style="width: 100%; max-width: 400px;" AllowFiltering="true" />

            </div>

            <div class="ml-4">
                <label for="input" class="block text-gray-700 text-sm font-bold mb-2">Add Squence</label>

                <RadzenButton class="" Click="@(() => OpenSequenceWindow())" Icon="autorenew"></RadzenButton>

            </div>
            <div>
                <label for="input" class="block text-gray-700 text-sm font-bold mb-2">Collaborating Shifts</label>


                <RadzenSwitch @bind-Value=@switchedOn Change=@(args => OnChange()) InputAttributes="@(new Dictionary<string, object>(){ { "aria-label", "Switch value" }})" />
            </div>
            <div>
                <label for="input" class="block text-gray-700 text-sm font-bold mb-2">Time</label>

                <RadzenDatePicker Change=@ChangeStartTime @bind-Value=@valstart1 ShowTime="true" TimeOnly="true"
                                  DateFormat="HH:mm" />
            </div>



        </div>

    </div>




<RadzenScheduler @ref=@scheduler TItem="EmployeeShiftDTO" Data=@employeeShiftDTOs SlotRender=@OnSlotRender
                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender LoadData=@FetchEmpShifts
                 TextProperty="ShiftName" SelectedIndex="1" StartProperty="Start" EndProperty="End"
                 Style="width: auto; height: 700px; border-radius:10px; padding:0.5rem;">


    <RadzenWeekView TimeFormat="HH:mm" EndTime="Endtime" StartTime="Starttime" />
    <RadzenMonthView  />
</RadzenScheduler>





@code {
    public DateTime? valstart1 = new DateTime(2023, 1, 1, 0, 0, 0);
    public DateTime? valstart2 = new DateTime(2023, 1, 1, 23, 59, 59);
    public RadzenScheduler<EmployeeShiftDTO> scheduler {    get; set; } = new RadzenScheduler<EmployeeShiftDTO>();
    public RadzenHeader header = new RadzenHeader();
    public TimeSpan Endtime = new TimeSpan(23, 59, 59);
    public TimeSpan Starttime = new TimeSpan(0, 0, 0);
    public Action<SchedulerAppointmentRenderEventArgs<EmployeeShiftDTO>> AppointmentRender { get; set; }
    private IEnumerable<DailyScheduleDTO>? DailyShifts;

    private List<int> _empNrs = [];
    public List<int> EmpNrs { get; set; }

    public bool SelectionChanged { get; set; } = false;
    public bool switchedOn = false;
    private IEnumerable<DomainDTO>? employees;

    protected override async Task OnInitializedAsync()
    {

    }


    public Dictionary<string, object> dict { get; set; } = new Dictionary<string, object>();

    IEnumerable<EmployeeShiftDTO> employeeShiftDTOs;

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {

        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }


        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(155,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        var dict = new Dictionary<string, object>
        {
        { "Start", args.Start },
        { "End", args.End },
        };

        dict["Domains"] = EmpNrs;

        try
        {
            if (EmpNrs != null)
            {
                EmployeeShiftDTO data = await DialogService.OpenAsync<AddShiftPage>("Add Shift", new Dictionary<string, object>(dict));

                if (data != null)
                {
                    var shiftInfo = DailyShifts.Where(x => x.Nr == data.ShiftNR).First();
                    data.ShiftHours = shiftInfo.Hours;
                    data.ShiftName = shiftInfo.Name;

                    employeeShiftDTOs = employeeShiftDTOs.Where(x => !x.Start.Equals(data.Start));
                    employeeShiftDTOs = employeeShiftDTOs.Append(data);

                }
            }

        }
        catch (Exception ex)
        {
        }

        StateHasChanged();
        await scheduler.Reload();
    }

    async Task OpenSequenceWindow()
    {
        try
        {

            var data = await DialogService.OpenAsync<AddSequence>("Add Sequence", new Dictionary<string, object>
        {
                {"employees", employees},
                {"DailyShifts", DailyShifts }
        });


        }
        catch (Exception ex)
        {
            //console.Log($"An error occurred: {ex.Message}");
        }
        StateHasChanged();
        await scheduler.Reload();
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<EmployeeShiftDTO> args)
    {
        try
        {
           // console.Log($"AppointmentSelect: Appointment={args.Data.ShiftName}");

            EmployeeShiftDTO copy = args.Data;

            var data = await DialogService.OpenAsync<EditShiftPage>("Edit Shift", new Dictionary<string, object> {
                { "Shift", copy }
            });
            // employeeShiftDTOs = employeeShiftDTOs.Where(x => x != copy);
            //  employeeShiftDTOs = employeeShiftDTOs.Concat([(EmployeeShiftDTO)data]);
            StateHasChanged();
            await scheduler.Reload();
        }
        catch (Exception ex)
        {
            //console.Log($"An error occurred: {ex.Message}");
        }
    }



    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<EmployeeShiftDTO> args)
    {
        var matchingShift = DailyShifts.FirstOrDefault(shift => shift.Name == args.Data.ShiftName);

        if (matchingShift != null)
        {
            args.Attributes["style"] = $"background: {matchingShift.Color}";
            args.Attributes["title"] = $"ShiftName-{args.Data.ShiftName}";
        }
    }



    void ChangeStartTime()
    {
        Starttime = new TimeSpan(valstart1.Value.Hour, valstart1.Value.Minute, valstart1.Value.Second);
    }


    async Task FetchEmployeeShifts()
    {
        var firstSelectedDay = scheduler.CurrentDate;
        var result = EmpNrs == null || EmpNrs.Count == 0 ?
                     await ApiClient.GetEmployeeShifts(employees.Select(x => x.Nr).ToList(), firstSelectedDay)
                     : await ApiClient.GetEmployeeShifts(EmpNrs, firstSelectedDay);
        employeeShiftDTOs = result;
        Console.WriteLine("Get Executed");
    }

    async Task FetchGroupedEmployeeShifts()
    {
        var firstSelectedDay = scheduler.CurrentDate;
        var result = await ApiClient.GetGroupedEmployeeShifts(EmpNrs, firstSelectedDay);
        employeeShiftDTOs = result;
        Console.WriteLine("Get Grouped Executed");
    }

    async Task FetchEmpShifts(SchedulerLoadDataEventArgs? args)
    {
        if (employees == null || DailyShifts == null)
        {
            employees = (List<DomainDTO>)await ApiClient.GetDomains();
            DailyShifts = await ApiClient.GetDailySchedule();
        }

        var start = args != null ? args.Start : scheduler.SelectedView.StartDate;
        var end = args != null ? args.End : scheduler.SelectedView.EndDate;

        if (switchedOn == true)
        {

            var firstSelectedDay = scheduler.CurrentDate;
            var result = EmpNrs == null || EmpNrs.Count == 0 ?
                    await ApiClient.GetEmployeeShifts(employees.Select(x => x.Nr).ToList(), firstSelectedDay)
                    : await ApiClient.GetEmployeeShifts(EmpNrs, firstSelectedDay);
            employeeShiftDTOs = result;
            Console.WriteLine("Fetched");
            await FetchGroupedEmployeeShifts();
        }
        else
        {
            await FetchEmployeeShifts();
        }
        Console.WriteLine("Fetched");
    }


    async Task DropdownChanged()
    {
        if (EmpNrs == null)
        {
            switchedOn = false;
        }
        StateHasChanged();
        await scheduler.Reload();

    }

    async Task OnChange()
    {
        if (EmpNrs == null)
        {
            switchedOn = false;
        }
        else
        {
            StateHasChanged();
            await scheduler.Reload();
        }

    }




}
