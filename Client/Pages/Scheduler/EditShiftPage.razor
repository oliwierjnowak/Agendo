@inject DialogService DialogService
@using Agendo.Client.HttpClients
@using Agendo.Server.Models;
@using Agendo.Shared.Form.CreateEmployeeShift;
@using Radzen.Blazor;
@using Radzen;
@inject IApiClient ApiClient;


<RadzenTemplateForm TItem="EmployeeShiftDTO" Data="@model" Submit=@OnSubmit>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Shift" />
        </div>
        <div class="col">

            <RadzenDropDown TItem="DailyScheduleDTO"
                            @bind-Value=@shiftnr
                            Data=@shifts
                            TextProperty="Name"
                            ValueProperty="Nr"
                            Style="width: 100%; max-width: 400px;" />

        </div>
    </div>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Start" />
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true" />
            <RadzenRequiredValidator Text="Start is required" Component="Start" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="mt-4">
            <RadzenText TextStyle="TextStyle.Body1"><b>Employees:</b></RadzenText>
            @if (domainDTOs != null)
            {
                <div class="divide-y divide-gray-200">
                    @foreach (var x in domainDTOs)
                    {
                        <div class="flex justify-between py-2">
                            <div>@x.Name</div>
                            <RadzenButton Icon="delete" Click="@( () => RemoveDomainDTO(x) )" />
                        </div>
                    }
                </div>
            }
        <div class="mt-4 flex space-x-2">
            <RadzenButton Text="Add" Icon="add_circle_outline" Click="@AddDomainDTO" />

            <RadzenDropDown TItem="DomainDTO"
                            @bind-Value=@EmpNrs
                            Data=@domainsNotSelected
                            TextProperty="Name"
                            Multiple=true
                            Placeholder="Not selected Employees"
                            AllowClear="true"
                            Chips="true"
                            ValueProperty="Nr"
                            Style="width: 100%; max-width: 400px;" />
        </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
            <RadzenButton ButtonType="ButtonType.Reset" Click="@CloseEditWindow" Text="Cancel" />

        </div>
    </div>
</RadzenTemplateForm>

@code {
    [Parameter]
    public EmployeeShiftDTO Shift { get; set; }
    [Parameter]
    public int EmpNR { get; set; }
    [Parameter]
    public int shiftnr { get; set; }

    [Parameter]
    public DateTime Start { get; set; }

    public IEnumerable<DomainDTO>? domainDTOs;


    public IEnumerable<DailyScheduleDTO>? shifts;

    private EmployeeShiftDTO model = new EmployeeShiftDTO();

    public IEnumerable<DomainDTO>? domainsNotSelected;

    private List<int> _empNrs = new List<int>();

    public List<int> EmpNrs
    {
        get { return _empNrs; }
        set
        {
            _empNrs = value;
        }
    }



    List<DomainDTO> domainsToRemove = new List<DomainDTO>();

    List<DomainDTO> domainsSelected = new List<DomainDTO>();



    protected override async Task OnInitializedAsync()
    {
        model = Shift;
        shiftnr = Shift.ShiftNR;
        Start = Shift.Start;

        shifts = await ApiClient.GetDailySchedule();
        domainDTOs = await ApiClient.GetDomainOfShift(Start,shiftnr);

        domainsNotSelected = await ApiClient.GetDomains();

        var domainDTOsSet = new HashSet<int>(domainDTOs.Select(d => d.Nr));
        domainsNotSelected = domainsNotSelected?.Where(domain => !domainDTOsSet.Contains(domain.Nr));

    }





    async void OnSubmit()
    {   

        if(domainsToRemove != null)
        {
            foreach(var x in domainsToRemove)
            {
                var body = new CreateEmployeeShift
                {
                    EmpNr = x.Nr,
                    ShiftDate = model.Start,
                    ShiftNr = 1
                };
                await ApiClient.PutShift(body);
            }

        }


        foreach (var x in domainDTOs)
        {
            var body2 = new CreateEmployeeShift
            {
                EmpNr = x.Nr,
                ShiftDate = model.Start,
                ShiftNr = shiftnr
            };

            await ApiClient.PutShift(body2);

        }



        DialogService.Close(model);
    }

    private void AddDomainDTO()
    {
        if (domainDTOs == null)
        {
            domainDTOs = new List<DomainDTO>();
        }

        // Assuming domainsNotSelected is IEnumerable<DomainDTO>
        var selectedDomains = domainsNotSelected.Where(d => EmpNrs.Contains(d.Nr));

        // If domainDTOs is a List
        if (domainDTOs is List<DomainDTO> list)
        {
            foreach (var domain in selectedDomains)
            {
                if (!list.Any(d => d.Nr == domain.Nr))
                {
                    list.Add(domain);
                }
            }
        }
        else // If domainDTOs is IEnumerable but not a list
        {
            var existingDomains = domainDTOs.ToList();
            foreach (var domain in selectedDomains)
            {
                if (!existingDomains.Any(d => d.Nr == domain.Nr))
                {
                    existingDomains.Add(domain);
                }
            }
            domainsSelected = existingDomains;
        }

        // Update UI or perform other necessary operations
    }



    private void RemoveDomainDTO(DomainDTO x)
    {
        // Code to remove the specified DomainDTO
        domainsToRemove.Add(x);
        domainDTOs = domainDTOs.Where(d => d != x);

    }

    private void CloseEditWindow()
    {
        DialogService.Close(model);

    }

    private void Save()
    {

        DialogService.Close(model);
    }
    }