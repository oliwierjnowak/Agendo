@inject DialogService DialogService
@using Agendo.Server.Models;
@using Agendo.Shared.Form.CreateEmployeeShift;
@using Radzen.Blazor;
@using Radzen;
@inject HttpClient _http;
<RadzenTemplateForm TItem="EmployeeShiftDTO" Data="@model" Submit=@OnSubmit>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Shift" />
        </div>
        <div class="col">

            <RadzenDropDown TItem="DailyScheduleDTO"
                            @bind-Value=@shiftnr
                            Data=@shifts
                            TextProperty="Name"
                            ValueProperty="Nr"
                            Style="width: 100%; max-width: 400px;" />

        </div>
    </div>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Start" />
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true" />
            <RadzenRequiredValidator Text="Start is required" Component="Start" />
        </div>
    </div>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3 mt-4">
            <RadzenLabel class="text-lg" Text="Employees"/>
            @if (domainDTOs != null)
            {
                @foreach (var x in domainDTOs)
                {
                    <div>
                        @x.Name

                    </div>
                }
            }
        <div class="mt-4 flex w-max">
            <RadzenButton Text="Add" Icon="add_circle_outline" Click="@AddDomainDTO" />
            <RadzenButton Icon="delete" Text="Delete" Click="@RemoveDomainDTO" Style="margin-left: 10px;" />
        </div>


        </div>
    </div>

    <div class="row">
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
        </div>
    </div>
</RadzenTemplateForm>
@code {
    [Parameter]
    public EmployeeShiftDTO Shift { get; set; }
    [Parameter]
    public int EmpNR { get; set; }
    [Parameter]
    public int shiftnr { get; set; }

    [Parameter]
    public DateTime Start { get; set; }

    public IEnumerable<DomainDTO>? domainDTOs;

    public IEnumerable<DailyScheduleDTO>? shifts;


    private EmployeeShiftDTO model = new EmployeeShiftDTO();

    protected override void OnParametersSet()
    {

    }

    protected override async Task OnInitializedAsync()
    {
        model = Shift;
        shiftnr = Shift.ShiftNR;
        Start = Shift.Start;

        // Format the Start date
        string formattedStartDate = Start.ToString("yyyy-MM-ddTHH:mm:ss");

        // Build the query string
        string queryString = $"api/domain/shiftemployees?Start={formattedStartDate}&shiftNR={shiftnr}";

        // Make the API calls
        shifts = await _http.GetFromJsonAsync<IEnumerable<DailyScheduleDTO>>("api/dailySchedule");
        domainDTOs = await _http.GetFromJsonAsync<IEnumerable<DomainDTO>>(queryString);
    }




    async void OnSubmit()
    {

        var body = new CreateEmployeeShift
        {
            EmpNr = EmpNR,
            ShiftDate = model.Start,
            ShiftNr = shiftnr
        };



        var x = await _http.PutAsJsonAsync("api/EmployeeShift", body);
        Console.WriteLine(x);
        DialogService.Close(model);
    }

    private void AddDomainDTO()
    {
        // Code to add a new DomainDTO
        // This might involve showing a dialog to select an employee, or directly adding a default new DomainDTO instance
        //var newDomainDTO = new DomainDTO(); // Modify as needed
        //domainDTOs = domainDTOs.Append(newDomainDTO); // Append the new DTO
    }

    private void RemoveDomainDTO()
    {
        // Code to remove the specified DomainDTO
        //domainDTOs = domainDTOs.Where(d => d != dto);
    }
    }