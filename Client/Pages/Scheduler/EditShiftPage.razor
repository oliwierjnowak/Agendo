@inject DialogService DialogService
@using Agendo.Client.HttpClients
@using Agendo.Shared.DTOs;
@using Agendo.Shared.Form.CreateEmployeeShift;
@using Radzen.Blazor;
@using Radzen;
@inject IApiClient ApiClient;
@attribute [Authorize(Roles = "719")]

<RadzenTemplateForm TItem="EmployeeShiftDTO" Data="@model" Submit=@OnSubmit>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Shift" />
        </div>
        <div class="col">

            <RadzenDropDown TItem="DailyScheduleDTO"
                            @bind-Value=@model.ShiftNR
                            Data=@shifts
                            TextProperty="Name"
                            ValueProperty="Nr"
                            Style="width: 100%; max-width: 400px;" />

        </div>
    </div>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Start" />
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true" Disabled="true" />
            <RadzenRequiredValidator Text="Start is required" Component="Start" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="mt-4">
            <RadzenText TextStyle="TextStyle.Body1"><b>Employees:</b></RadzenText>
            @if (model.Domains != null)
            {
                <div class="divide-y divide-gray-200">
                    @foreach (var domain in model.Domains)
                    {
                        <div class="flex justify-between py-2">
                            <div>@domain.Name</div>
                            <RadzenButton Icon="delete" Click="@( () => RemoveDomainDTO(domain) )" />
                        </div>
                    }
                </div>
            }
        <div class="mt-4 flex space-x-2">
            <RadzenButton Text="Add" Icon="add_circle_outline" Click="@AddDomainDTO" />

            <RadzenDropDown TItem="DomainDTO"
                            @bind-Value=@EmpNrs
                            Data=@domainsNotSelected
                            TextProperty="Name"
                            Multiple=true
                            Placeholder="Not selected Employees"
                            AllowClear="true"
                            Chips="true"
                            ValueProperty="Nr"
                            Style="width: 100%; max-width: 400px;" />
        </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
            <RadzenButton ButtonType="ButtonType.Reset" Click="@CloseEditWindow" Text="Cancel" />

        </div>
    </div>
</RadzenTemplateForm>

@code {
    [Parameter]
    public  EmployeeShiftDTO Shift { get; set; }

    public IEnumerable<DailyScheduleDTO>? shifts;

    private EmployeeShiftDTO model = new EmployeeShiftDTO();

    public IEnumerable<DomainDTO>? domainsNotSelected;

    private List<int> _empNrs = new List<int>();

    public List<int> EmpNrs
    {
        get { return _empNrs; }
        set
        {
            _empNrs = value;
        }
    }




    List<DomainDTO> domainsToRemove = new List<DomainDTO>();

    List<DomainDTO> domainsSelected = new List<DomainDTO>();

    IEnumerable<DomainDTO> initzializedDomains = [];

    protected override async Task OnInitializedAsync()
    {
        model = Shift;
        initzializedDomains = Shift.Domains;
        shifts = await ApiClient.GetDailySchedule();
        var alldomains = await ApiClient.GetDomains();
        domainsNotSelected = alldomains.Except(model.Domains).ToList();
        domainsSelected = model.Domains.ToList();

    }





    async void OnSubmit()
    {
        var body = new CreateMultipleEmpShift
        {
                RemovedDomains = domainsToRemove.Select(x => x.Nr),
                AddedDomains = EmpNrs,
                ShiftDate = model.Start,
                ShiftNr = model.ShiftNR,
                NotChangedDomains = initzializedDomains.Select(x => x.Nr).Where(x => !domainsToRemove.Any(y => y.Nr == x))
        };

        var x = await ApiClient.ManageEmployeesShift(body);

        CloseEditWindow();
    }

    private void AddDomainDTO()
    {

        var selectedDomains = domainsNotSelected.Where(d => EmpNrs.Contains(d.Nr)).ToList();


        foreach (var domain in selectedDomains)
        {
            if (!model.Domains.Any(d => d.Nr == domain.Nr))
            {
                model.Domains= model.Domains.Append(domain);
                if (initzializedDomains.Any(x=> x.Nr == domain.Nr))
                {
                    EmpNrs.Remove(domain.Nr);
                }
            }
        }
        domainsNotSelected = domainsNotSelected.Except(selectedDomains);

        // Update UI or perform other necessary operations
    }



    private void RemoveDomainDTO(DomainDTO x)
    {
        // Code to remove the specified DomainDTO
        domainsToRemove.Add(x);
        model.Domains = model.Domains.Where(rem => rem.Nr != x.Nr);
        domainsNotSelected = domainsNotSelected.Append(x);
        EmpNrs.Remove(x.Nr);
        //  model.Domains = model.Domains.Where(d => d != x).ToList();

    }

    private void CloseEditWindow()
    {
        DialogService.Close(model);

    }

    private void Save()
    {

        DialogService.Close(model);
    }
}